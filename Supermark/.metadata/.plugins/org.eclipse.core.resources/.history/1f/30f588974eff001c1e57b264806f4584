package supermark;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.MessageFormat;
import java.util.Date;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

public class Usuario {
	// atributos
	private int id;
	private String nombre;
	private String apellido;
	private String email;
	private String dni;
	private String contrasenia;
	private boolean isAdmin;
	private Domicilio Domicilio;
	private int id_domicilio;

	// Constructor por defecto
	public Usuario() {
	}

	// Constructor Normal
	public Usuario(int id, String nombre, String apellido, String email, String dni, String contrasenia, boolean isAdmin, int id_domicilio) {
		super();
		this.id = id;
		this.nombre = nombre;
		this.apellido = apellido;
		this.email = email;
		this.dni = dni;
		this.contrasenia = contrasenia;
		this.isAdmin = isAdmin;
		this.id_domicilio = id_domicilio;
	}

	// Getters y Setters
	public int getId() {
		return id;
	}

	public void setId(int id) {
		this.id = id;
	}

	public String getNombre() {
		return nombre;
	}

	public void setNombre(String nombre) {
		this.nombre = nombre;
	}

	public String getApellido() {
		return apellido;
	}

	public void setApellido(String apellido) {
		this.apellido = apellido;
	}

	public String getEmail() {
		return email;
	}

	public void setEmail(String email) {
		this.email = email;
	}

	public String getDni() {
		return dni;
	}

	public void setDni(String dni) {
		this.dni = dni;
	}

	public String getContrasenia() {
		return contrasenia;
	}

	public void setContrasenia(String contrasenia) {
		this.contrasenia = contrasenia;
	}

	public boolean isAdmin() {
		return isAdmin;
	}

	public void setAdmin(boolean isAdmin) {
		this.isAdmin = isAdmin;
	}

	public Domicilio getDomicilio() {
		return Domicilio;
	}

	public void setDomicilio(Domicilio domicilio) {
		Domicilio = domicilio;
	}

	public int getId_domicilio() {
		return id_domicilio;
	}

	public void setId_domicilio(int id_domicilio) {
		this.id_domicilio = id_domicilio;
	}
	
	
	public void registrarse(String nombre, String apellido, String email, String dni, String contrasenia,
			int id_domicilio) {
		// Registrar JDBC Driver
		// JDBC nombre del driver y URL de la BDD
		Credenciales mi_credi = new Credenciales();
		String JDBC_DRIVER = mi_credi.JDBC_DRIVER;
		String DB_URL = mi_credi.DB_URL;
		// Credenciales de la BDD
		String USER = mi_credi.USER;
		String PASS = mi_credi.PASS;

		Connection conn = null;
		Statement stmt = null;
		try {
			// PASO 2: Registrar JDBC driver
			Class.forName(JDBC_DRIVER);

			// PASO3: Abrir una Conexion
			System.out.println("Connecting to database...");
			conn = DriverManager.getConnection(DB_URL, USER, PASS);

			// PASO 4: Ejecutar una consulta SQL
			System.out.println("Creating statement...");
			stmt = conn.createStatement();
			if (Usuario.validacion_email_usuario(email) && Usuario.valida_contraseña(contrasenia)) {
			String sql = MessageFormat.format(
					"INSERT INTO usuario (nombre, apellido, email, dni, contrasenia, id_domicilio) VALUES ({0}, {1}, {2}, {3}, {4}, {5});",
					nombre, apellido, email, dni, contrasenia, id_domicilio);
			System.out.println(sql);
			stmt.executeUpdate(sql);

			System.out.println("Valores Insertados con Exito");
			 }else {
				 System.out.println("No se pudo insertar los valores");
			 }

			// PASO6: Entorno de Limpieza
			stmt.close();
			conn.close();
		} catch (SQLException se) {
			// Resolver errores para JDBC
			se.printStackTrace();
		} catch (Exception e) {
			// Resolver errores para Class.forName
			e.printStackTrace();
		} finally {
			// Bloque finalmente utilizado para cerrar recursos
			try {
				if (stmt != null)
					stmt.close();
			} catch (SQLException se2) {
			} // Nada que podamos hacer
			try {
				if (conn != null)
					conn.close();
			} catch (SQLException se) {
				se.printStackTrace();
			} // cierra finally try
		} // cierra try
		System.out.println("Goodbye!");

	}
	
	public boolean funlogin(String email, String contrasenia){
		 //  Registrar JDBC Driver
		// JDBC email del driver y URL de la BDD
			Credenciales mi_credi = new Credenciales();
			String JDBC_DRIVER = mi_credi.JDBC_DRIVER; 
			String DB_URL = mi_credi.DB_URL;
		 // Credenciales de la BDD
			String USER = mi_credi.USER;
			String PASS = mi_credi.PASS;
			
			 Connection conn = null;
			 Statement stmt = null;
			 
			 try{
			 //PASO 2: Registrar JDBC driver
			 Class.forName(JDBC_DRIVER);
			 
			 //PASO3: Abrir una Conexion
			 System.out.println("Connecting to database...");
			 conn = DriverManager.getConnection(DB_URL,USER,PASS);
			 
			 //PASO 4: Ejecutar una consulta SQL
			 System.out.println("Creating statement...");
			 stmt = conn.createStatement();
			 String sql =  MessageFormat.format("SELECT * FROM usuario where email = {0} and contrasenia = {1};", email, contrasenia);
			 ResultSet rs = stmt.executeQuery(sql);
			 System.out.println(sql);
			 //STEP 5: Extraer datos del ResultSet
			 while(rs.next()){
				 String email_tupla = rs.getString("email");
				 String contrasenia_tupla = rs.getString("contrasenia");
				 if (contrasenia.equals(contrasenia_tupla) && email.equals(email_tupla)){
					 System.out.println("Valores encontrados:) !");
					 return true; 
				 }

			 }
			 
			 
			 //PASO6: Entorno de Limpieza
			 stmt.close();
			 conn.close();
			 }catch(SQLException se){
				 // Resolver errores para JDBC
				 se.printStackTrace();
			 }catch(Exception e){
				 // Resolver errores para Class.forName
				 e.printStackTrace();
			 }finally{
			 // Bloque finalmente utilizado para cerrar recursos
			 try{
				 if(stmt!=null)
					 stmt.close();
			 }catch(SQLException se2){
			 }// Nada que podamos hacer
			 try{
				 if(conn!=null)
					 conn.close();
			 }catch(SQLException se){
			 se.printStackTrace();
			 	} //cierra finally try
			 } //cierra try
			 System.out.println("Valores no encontrados:) !");
		 	return false;
		
	}
	
	

	public static boolean valida_contraseña(String contraseña) {
		Pattern pat = Pattern.compile("^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[$@$!%*?&#'])[A-Za-z\\d$@$!%*?&#']{8,15}");
		Matcher mat = pat.matcher(contraseña);
		if (mat.matches()) {
			return true;
		} else {
			return false;
		}
	}

	public static boolean validacion_email_usuario(String email) {
		Credenciales mi_credi = new Credenciales();
		String JDBC_DRIVER = mi_credi.JDBC_DRIVER;
		String DB_URL = mi_credi.DB_URL;
		// Credenciales de la BDD
		String USER = mi_credi.USER;
		String PASS = mi_credi.PASS;

		Connection conn = null;
		Statement stmt = null;

		try {
			// PASO 2: Registrar JDBC driver
			Class.forName(JDBC_DRIVER);

			// PASO3: Abrir una Conexion
			System.out.println("Connecting to database...");
			conn = DriverManager.getConnection(DB_URL, USER, PASS);

			// PASO 4: Ejecutar una consulta SQL
			System.out.println("Creating statement...");
			stmt = conn.createStatement();
			String sql = "SELECT * FROM usuario";
			ResultSet rs = stmt.executeQuery(sql);
			email = email.replace("'", "");
			// STEP 5: Extraer datos del ResultSet
			while (rs.next()) {
				String email_tupla = rs.getString("email");
				// System.out.println(email_tupla);
				if (email.equals(email_tupla)) {
					return false;
				}
			}

			// PASO6: Entorno de Limpieza
			stmt.close();
			conn.close();
		} catch (SQLException se) {
			// Resolver errores para JDBC
			se.printStackTrace();
		} catch (Exception e) {
			// Resolver errores para Class.forName
			e.printStackTrace();
		} finally {
			// Bloque finalmente utilizado para cerrar recursos
			try {
				if (stmt != null)
					stmt.close();
			} catch (SQLException se2) {
			} // Nada que podamos hacer
			try {
				if (conn != null)
					conn.close();
			} catch (SQLException se) {
				se.printStackTrace();
			} // cierra finally try
		} // cierra try
		System.out.println("Goodbye!");
		return true;

	}



}

//	@Override
//	public String toString() {
//		return "Usuario [id_usuario=" + id_usuario + ", nombre=" + nombre + ", apellido=" + apellido
//				+ ", esAdministrador=" + esAdministrador + ", email=" + email + ", fecha_nacimiento=" + fecha_nacimiento
//				+ ", dni=" + dni + "]";	
//		}
